package com.org.user.serviceimpl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.crossstore.ChangeSetPersister.NotFoundException;

import com.org.user.entities.User;
import com.org.user.exceptions.ValidationException;
import com.org.user.repository.UserRepository;
import com.org.user.service.Service;
@org.springframework.stereotype.Service
public class ServiceImpl implements Service {

	
	@Autowired
	private UserRepository userRepository;
	@Override
	public User getUser(int id) {
		    
		return userRepository.findById(id).orElse(new User());
	}

	@Override
	public List<User> getAllUser(User user) {
              return userRepository.getAll(user);
         
	
	}

	@Override
	public User addUser(User user) {
		return userRepository.save(user);
	}

	
	@Override
    public User updateUser(Long userId, User updatedUser) throws NotFoundException, ValidationException {
        // Validate the user ID
        if (userId == null || userId <= 0) {
            throw new ValidationException("Invalid user ID");
        }

        // Fetch the existing user by ID
        User existingUser = userRepository.findById(userId).orElse(null);

        if (existingUser == null) {
            throw new NotFoundException("User not found");
        }

        // Validate and update the user information
        String newUsername = updatedUser.getUsername();
        String newEmail = updatedUser.getEmail();

        // Validate the new username and email (you can add more complex validation rules)
        if (newUsername == null || newUsername.trim().isEmpty()) {
            throw new ValidationException("Username is required");
        }

        if (newEmail == null || !isValidEmail(newEmail)) {
            throw new ValidationException("Invalid email address");
        }

        // Update the existing user with the new information
        existingUser.setUserName(newUsername);
        existingUser.setEmail(newEmail);

        // Save the updated user to the database
        return userRepository.save(existingUser);
    }
		 
		   

	
	@Override
	public void deleteUser(int id) {
		// TODO Auto-generated method stub
		
	}

}
